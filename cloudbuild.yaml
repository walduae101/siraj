steps:
  # 1a. Validate next.config.mjs contract before build
  - name: 'gcr.io/cloud-builders/bash'
    id: validate-config
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        echo "üîç Validating next.config.mjs header contract..."
        chmod +x scripts/validate-config.sh || true
        ./scripts/validate-config.sh
        echo "‚úÖ Config validation passed"

  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/siraj:$COMMIT_SHA', '.']

  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/siraj:$COMMIT_SHA']

  # Deploy to Cloud Run (US region) with Secret Manager
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args:
      - run
      - deploy
      - siraj
      - --image
      - gcr.io/$PROJECT_ID/siraj:$COMMIT_SHA
      - --region
      - us-central1
      - --platform
      - managed
      - --allow-unauthenticated
      - --update-secrets
      - NEXT_PUBLIC_FIREBASE_PROJECT_ID=NEXT_PUBLIC_FIREBASE_PROJECT_ID:latest,NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN:latest,NEXT_PUBLIC_FIREBASE_API_KEY=NEXT_PUBLIC_FIREBASE_API_KEY:latest,NEXT_PUBLIC_WEBSITE_URL=NEXT_PUBLIC_WEBSITE_URL:latest,NEXT_PUBLIC_GAMESERVER_CONNECTION_MESSAGE=NEXT_PUBLIC_GAMESERVER_CONNECTION_MESSAGE:latest,NEXT_PUBLIC_DISCORD_INVITE_URL=NEXT_PUBLIC_DISCORD_INVITE_URL:latest,NEXT_PUBLIC_PAYNOW_STORE_ID=NEXT_PUBLIC_PAYNOW_STORE_ID:latest,NEXT_PUBLIC_BACKGROUND_IMAGE_URL=NEXT_PUBLIC_BACKGROUND_IMAGE_URL:latest,OPENAI_API_KEY=OPENAI_API_KEY:latest,PAYNOW_API_KEY=PAYNOW_API_KEY:latest,FIREBASE_PROJECT_ID=FIREBASE_PROJECT_ID:latest,PAYNOW_STORE_ID=PAYNOW_STORE_ID:latest,SIRAJ_CONFIG_JSON=SIRAJ_CONFIG_JSON:latest

  # 1b. Capture the exact image the US service is running
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: capture-us-image
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        echo "üì∏ Capturing US image digest..."
        IMAGE="$(gcloud run services describe siraj --region=us-central1 \
          --format='value(spec.template.spec.containers[0].image)')"
        echo "IMAGE=${IMAGE}" | tee image.env
        echo "‚úÖ US image: ${IMAGE}"

  # 1c. Deploy EU to the exact same image (parity)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: deploy-eu-parity
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        source image.env
        echo "üåç Deploying EU to same image: ${IMAGE}"
        gcloud run services update siraj-eu --region=europe-west1 --image "$IMAGE" --quiet
        echo "‚úÖ EU deployment complete"

  # 1d. Environment parity check (ensure both regions have same secret refs)
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: env-parity
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        echo "üîç Checking environment parity..."
        dump () {
          gcloud run services describe "${1}" --region "${2}" --format=json \
          | jq -r '.spec.template.spec.containers[0].env[]? 
              | if has("valueFrom") and .valueFrom.secretKeyRef.name then
                  "\(.name)=secret:\(.valueFrom.secretKeyRef.name)"
                else
                  "\(.name)=plain"
                end' | sort
        }
        US="$(dump "siraj" "us-central1")"
        EU="$(dump "siraj-eu" "europe-west1")"
        echo "US environment refs:"
        echo "$US"
        echo "EU environment refs:"
        echo "$EU"
        diff <(echo "$US") <(echo "$EU") || { echo "‚ùå Environment parity check failed"; exit 1; }
        echo "‚úÖ Environment parity verified"

  # 1e. Invalidate CDN cache
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: invalidate-cdn
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        echo "üîÑ Invalidating CDN cache..."
        gcloud compute url-maps invalidate-cdn-cache siraj-web-map --path '/*' --quiet
        echo "‚úÖ CDN cache invalidated"

  # 1f. Post-deploy verifications (origin parity + CDN headers)
  - name: 'gcr.io/cloud-builders/bash'
    id: verify-origins
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        echo "üîç Verifying origin parity..."
        chmod +x scripts/verify-origins.sh || true
        ./scripts/verify-origins.sh
        echo "‚úÖ Origin parity verified"

  - name: 'gcr.io/cloud-builders/bash'
    id: cdn-parity
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        echo "üåê Verifying CDN headers..."
        chmod +x scripts/cdn-parity.sh || true
        ./scripts/cdn-parity.sh
        echo "‚úÖ CDN headers verified"

  # 1g. Quick smoke test (fast headers check)
  - name: 'gcr.io/cloud-builders/bash'
    id: quick-check
    entrypoint: bash
    args:
      - -lc
      - |
        set -euo pipefail
        echo "‚ö° Running quick smoke test..."
        chmod +x scripts/quick-check.sh || true
        ./scripts/quick-check.sh
        echo "‚úÖ Quick check passed"

  # 1h. tRPC post-deploy checks (prod)
  - id: "tRPC post-deploy checks (prod)"
    name: node:20
    entrypoint: bash
    args:
      - -lc
      - |
        node -v
        node .github/scripts/trpc-check.mjs
    env:
      - BASE_URL=https://siraj.life
      - MAX_ATTEMPTS=30
      - SLEEP_SECONDS=20
    waitFor:
      - "-"   # or the id of your previous "Invalidate CDN" step

substitutions:
  _URL_MAP: siraj-web-map
  _SERVICE_US: siraj
  _SERVICE_EU: siraj-eu
  _REGION_US: us-central1
  _REGION_EU: europe-west1

images:
  - 'gcr.io/$PROJECT_ID/siraj:$COMMIT_SHA'
